(()=>{"use strict";class e{reqMessage="";resMessage="";getPorotoMessageKey=(e,s)=>t=>{this.reqMessage="",this.resMessage="";const r=s.specSelectors.specJson().toJS(),a=t.pathName,o=t.method,n=r.paths[a][o];return n.req_message&&(this.reqMessage=n.req_message),n.res_message&&(this.resMessage=n.res_message),e(t)};get swaggerPlugin(){return{statePlugins:{spec:{wrapActions:{executeRequest:this.getPorotoMessageKey}}}}}set reqMessage(e){this.reqMessage=e}get reqMessage(){return this.reqMessage}set resMessage(e){this.resMessage=e}get resMessage(){return this.resMessage}}class s{#e=null;#s=null;constructor(e){this.#e=e}async setProtoBufData(e){const s=new this.#s;for(const t in e){const r=`set${t.charAt(0).toUpperCase()+t.slice(1)}`;s[r]&&s[r](e[t])}return s}async getBlobToObject(e){try{const s=await e.arrayBuffer(),t=new Uint8Array(s);return this.#s.deserializeBinary(t).toObject()}catch(e){console.error("Error : Protobuf deserializeBinary failed")}}async getObjectToBlob(e){try{e=JSON.parse(e);const s=(await this.setProtoBufData(e)).serializeBinary();return new Blob([s],{type:"application/octet-stream"})}catch(e){console.error("Error : Protobuf serializeBinary failed")}}checkMessage(){if(!this.#s)throw new Error("Error : No appropriate message in ProtoBuffer")}checkSwaggerConfigFile(e){if("http://127.0.0.1:5500/server.json"===e)return!0}async requestInterceptor(e){return this.checkSwaggerConfigFile(e.url)||(this.checkMessage(),e.body&&(e.body=await this.getObjectToBlob(e.body))),e}async responseInterceptor(e){if(this.checkSwaggerConfigFile(e.url))return e;if(this.checkMessage(),e.data instanceof Blob){let s=await this.getBlobToObject(e.data);e.data=s,e.text=JSON.stringify(s)}return e}set setMessage(e){this.#s=this.#e[e]}}function t(e){return null===e||"string"!=typeof e||0===e.trim().length}globalThis.SwaggerProtoBufUIBundle=(r,a)=>{const o=new s(r),n=new e;SwaggerUIBundle({...a,plugins:[n.swaggerPlugin,a.plugins?a.plugins:{}],requestInterceptor:async e=>{try{const s=n.reqMessage;t(s)||(o.setMessage=s,e=await o.requestInterceptor(e))}catch(e){console.error(e)}return a.requestInterceptor&&(e=a.requestInterceptor(e)),e},responseInterceptor:async e=>{try{const s=n.resMessage;t(s)||(o.setMessage=s,e=await o.responseInterceptor(e))}catch(e){console.error(e)}return a.responseInterceptor&&(e=a.responseInterceptor(e)),e}})}})();